import time
import cProfile

def timer_decorator(func):
    def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        print(f"Execution time of {func.__name__}: {end_time - start_time} seconds")
        return result
    return wrapper

@timer_decorator
def factorial(num: int):
    result = 1
    if isinstance(num, int) == False: return None
    if num < 0: return None
    if num in (0,1): return 1

    for n in range(1,num+1):
        result = result * n
    return result



def factorial_rec(num: int):
    if isinstance(num, int) == False:
        return None
    if num < 0:
        return None
    if num in (0,1):
        return 1

    return num * factorial_rec(num - 1)


print(factorial(4))
print(factorial(5))
print(factorial(999))
print(factorial(-225))
print(factorial(5.892))
print(factorial("yeah"))


start_time = time.perf_counter()
print(factorial_rec(999))
end_time = time.perf_counter()
execution_time = end_time - start_time
print(f"Factorial big number Execution time: {execution_time:.10f} seconds")

cProfile.run('factorial(990)')
cProfile.run('factorial_rec(990)')

print(factorial_rec(4))
print(factorial_rec(5))
print(factorial_rec(99))
print(factorial_rec(-225))
print(factorial_rec(5.892))
print(factorial_rec("yeah"))

